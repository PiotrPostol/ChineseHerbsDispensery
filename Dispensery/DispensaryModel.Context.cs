//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dispensery
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DispenseryEntities : DbContext
    {
        public DispenseryEntities()
            : base("name=DispenseryEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdministrationMethod> AdministrationMethods { get; set; }
        public virtual DbSet<AllHerb> AllHerbs { get; set; }
        public virtual DbSet<DispensingFee> DispensingFees { get; set; }
        public virtual DbSet<HerbStock> HerbStocks { get; set; }
        public virtual DbSet<PatentFormulaMain> PatentFormulaMains { get; set; }
        public virtual DbSet<PatentFormula> PatentFormulas { get; set; }
        public virtual DbSet<PatentFormulaSaleHistory> PatentFormulaSaleHistories { get; set; }
        public virtual DbSet<PatentFormulaStock> PatentFormulaStocks { get; set; }
        public virtual DbSet<PatentFormulaTemp> PatentFormulaTemps { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PostageCost> PostageCosts { get; set; }
        public virtual DbSet<Practitioner> Practitioners { get; set; }
        public virtual DbSet<PrescriptionCost> PrescriptionCosts { get; set; }
        public virtual DbSet<PrescriptionMain> PrescriptionMains { get; set; }
        public virtual DbSet<PrescriptionMainTemp> PrescriptionMainTemps { get; set; }
        public virtual DbSet<PrescriptionTemp> PrescriptionTemps { get; set; }
        public virtual DbSet<SupplierTable> SupplierTables { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TraditionalFormula> TraditionalFormulas { get; set; }
    
        public virtual int GetAllHerbsNames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllHerbsNames");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spAddHerbToStock(string herbRefNum, string batchNum, Nullable<decimal> buyPrice, Nullable<System.DateTime> expiaryDate, Nullable<decimal> quantity, Nullable<int> supplierID, Nullable<decimal> ratio, Nullable<System.DateTime> dateReceived, Nullable<System.DateTime> dateToDispensery, string herbForm)
        {
            var herbRefNumParameter = herbRefNum != null ?
                new ObjectParameter("herbRefNum", herbRefNum) :
                new ObjectParameter("herbRefNum", typeof(string));
    
            var batchNumParameter = batchNum != null ?
                new ObjectParameter("batchNum", batchNum) :
                new ObjectParameter("batchNum", typeof(string));
    
            var buyPriceParameter = buyPrice.HasValue ?
                new ObjectParameter("buyPrice", buyPrice) :
                new ObjectParameter("buyPrice", typeof(decimal));
    
            var expiaryDateParameter = expiaryDate.HasValue ?
                new ObjectParameter("expiaryDate", expiaryDate) :
                new ObjectParameter("expiaryDate", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(decimal));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("supplierID", supplierID) :
                new ObjectParameter("supplierID", typeof(int));
    
            var ratioParameter = ratio.HasValue ?
                new ObjectParameter("ratio", ratio) :
                new ObjectParameter("ratio", typeof(decimal));
    
            var dateReceivedParameter = dateReceived.HasValue ?
                new ObjectParameter("dateReceived", dateReceived) :
                new ObjectParameter("dateReceived", typeof(System.DateTime));
    
            var dateToDispenseryParameter = dateToDispensery.HasValue ?
                new ObjectParameter("dateToDispensery", dateToDispensery) :
                new ObjectParameter("dateToDispensery", typeof(System.DateTime));
    
            var herbFormParameter = herbForm != null ?
                new ObjectParameter("herbForm", herbForm) :
                new ObjectParameter("herbForm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddHerbToStock", herbRefNumParameter, batchNumParameter, buyPriceParameter, expiaryDateParameter, quantityParameter, supplierIDParameter, ratioParameter, dateReceivedParameter, dateToDispenseryParameter, herbFormParameter);
        }
    
        public virtual ObjectResult<spAllStocksIDOfHerb_Result> spAllStocksIDOfHerb(string herbRefNum)
        {
            var herbRefNumParameter = herbRefNum != null ?
                new ObjectParameter("herbRefNum", herbRefNum) :
                new ObjectParameter("herbRefNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAllStocksIDOfHerb_Result>("spAllStocksIDOfHerb", herbRefNumParameter);
        }
    
        public virtual int spClearPrescriptionTemp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spClearPrescriptionTemp");
        }
    
        public virtual int spCreatePatentFormula()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreatePatentFormula");
        }
    
        public virtual int spDeleteAllPatentFormulaTemp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAllPatentFormulaTemp");
        }
    
        public virtual ObjectResult<spGetAdmData_Result> spGetAdmData(Nullable<int> admId)
        {
            var admIdParameter = admId.HasValue ?
                new ObjectParameter("AdmId", admId) :
                new ObjectParameter("AdmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAdmData_Result>("spGetAdmData", admIdParameter);
        }
    
        public virtual ObjectResult<spGetAllPrescriptionMain_Result> spGetAllPrescriptionMain(string formulaRefNum)
        {
            var formulaRefNumParameter = formulaRefNum != null ?
                new ObjectParameter("formulaRefNum", formulaRefNum) :
                new ObjectParameter("formulaRefNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllPrescriptionMain_Result>("spGetAllPrescriptionMain", formulaRefNumParameter);
        }
    
        public virtual ObjectResult<spGetDataFromPrescriptionMain_Result> spGetDataFromPrescriptionMain(string formulaRefNum)
        {
            var formulaRefNumParameter = formulaRefNum != null ?
                new ObjectParameter("formulaRefNum", formulaRefNum) :
                new ObjectParameter("formulaRefNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDataFromPrescriptionMain_Result>("spGetDataFromPrescriptionMain", formulaRefNumParameter);
        }
    
        public virtual ObjectResult<spGetDataOfPF_Result> spGetDataOfPF(string pFname)
        {
            var pFnameParameter = pFname != null ?
                new ObjectParameter("PFname", pFname) :
                new ObjectParameter("PFname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDataOfPF_Result>("spGetDataOfPF", pFnameParameter);
        }
    
        public virtual ObjectResult<spGetHerbName_Result> spGetHerbName(string herbRefNum)
        {
            var herbRefNumParameter = herbRefNum != null ?
                new ObjectParameter("herbRefNum", herbRefNum) :
                new ObjectParameter("herbRefNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetHerbName_Result>("spGetHerbName", herbRefNumParameter);
        }
    
        public virtual int spGetHerbPrice(string refnum, string supplier)
        {
            var refnumParameter = refnum != null ?
                new ObjectParameter("refnum", refnum) :
                new ObjectParameter("refnum", typeof(string));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("supplier", supplier) :
                new ObjectParameter("supplier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetHerbPrice", refnumParameter, supplierParameter);
        }
    
        public virtual ObjectResult<string> spGetHerbRefNum(string herbName)
        {
            var herbNameParameter = herbName != null ?
                new ObjectParameter("herbName", herbName) :
                new ObjectParameter("herbName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetHerbRefNum", herbNameParameter);
        }
    
        public virtual ObjectResult<spGetHerbsNameInStock_Result> spGetHerbsNameInStock(string term)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetHerbsNameInStock_Result>("spGetHerbsNameInStock", termParameter);
        }
    
        public virtual ObjectResult<spGetHerbsNames_Result> spGetHerbsNames(string term)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetHerbsNames_Result>("spGetHerbsNames", termParameter);
        }
    
        public virtual ObjectResult<spGetHerbStockIdData_Result> spGetHerbStockIdData(Nullable<int> herbStockID)
        {
            var herbStockIDParameter = herbStockID.HasValue ?
                new ObjectParameter("herbStockID", herbStockID) :
                new ObjectParameter("herbStockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetHerbStockIdData_Result>("spGetHerbStockIdData", herbStockIDParameter);
        }
    
        public virtual ObjectResult<spGetPatientName_Result> spGetPatientName(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPatientName_Result>("spGetPatientName", patientIDParameter);
        }
    
        public virtual ObjectResult<spGetPatientPrescriptionHistory_Result> spGetPatientPrescriptionHistory(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPatientPrescriptionHistory_Result>("spGetPatientPrescriptionHistory", patientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetPFbottlesQty(string pfRefNum)
        {
            var pfRefNumParameter = pfRefNum != null ?
                new ObjectParameter("pfRefNum", pfRefNum) :
                new ObjectParameter("pfRefNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetPFbottlesQty", pfRefNumParameter);
        }
    
        public virtual ObjectResult<spGetPractitonerData_Result> spGetPractitonerData(Nullable<int> practitionerId)
        {
            var practitionerIdParameter = practitionerId.HasValue ?
                new ObjectParameter("practitionerId", practitionerId) :
                new ObjectParameter("practitionerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPractitonerData_Result>("spGetPractitonerData", practitionerIdParameter);
        }
    
        public virtual ObjectResult<spGetPrescriptionCostData_Result> spGetPrescriptionCostData(string formulaRefNumber)
        {
            var formulaRefNumberParameter = formulaRefNumber != null ?
                new ObjectParameter("formulaRefNumber", formulaRefNumber) :
                new ObjectParameter("formulaRefNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPrescriptionCostData_Result>("spGetPrescriptionCostData", formulaRefNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spGetTotalGranulesQuantityFromTemp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spGetTotalGranulesQuantityFromTemp");
        }
    
        public virtual ObjectResult<Nullable<decimal>> spGetTotalPrice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spGetTotalPrice");
        }
    
        public virtual int spGetTraditionalFormula(string formulaName)
        {
            var formulaNameParameter = formulaName != null ?
                new ObjectParameter("formulaName", formulaName) :
                new ObjectParameter("formulaName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetTraditionalFormula", formulaNameParameter);
        }
    
        public virtual int spInsertIntoPrescriptionMainFromTemp(Nullable<decimal> formulaTotalCost, string methodOfAdminist, Nullable<decimal> methodOfAdministCOST, Nullable<decimal> dispensingFee, string postage, Nullable<decimal> postageFee, string prescriptionStatus, string discountReason, Nullable<decimal> discount)
        {
            var formulaTotalCostParameter = formulaTotalCost.HasValue ?
                new ObjectParameter("formulaTotalCost", formulaTotalCost) :
                new ObjectParameter("formulaTotalCost", typeof(decimal));
    
            var methodOfAdministParameter = methodOfAdminist != null ?
                new ObjectParameter("methodOfAdminist", methodOfAdminist) :
                new ObjectParameter("methodOfAdminist", typeof(string));
    
            var methodOfAdministCOSTParameter = methodOfAdministCOST.HasValue ?
                new ObjectParameter("methodOfAdministCOST", methodOfAdministCOST) :
                new ObjectParameter("methodOfAdministCOST", typeof(decimal));
    
            var dispensingFeeParameter = dispensingFee.HasValue ?
                new ObjectParameter("dispensingFee", dispensingFee) :
                new ObjectParameter("dispensingFee", typeof(decimal));
    
            var postageParameter = postage != null ?
                new ObjectParameter("postage", postage) :
                new ObjectParameter("postage", typeof(string));
    
            var postageFeeParameter = postageFee.HasValue ?
                new ObjectParameter("postageFee", postageFee) :
                new ObjectParameter("postageFee", typeof(decimal));
    
            var prescriptionStatusParameter = prescriptionStatus != null ?
                new ObjectParameter("prescriptionStatus", prescriptionStatus) :
                new ObjectParameter("prescriptionStatus", typeof(string));
    
            var discountReasonParameter = discountReason != null ?
                new ObjectParameter("discountReason", discountReason) :
                new ObjectParameter("discountReason", typeof(string));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("discount", discount) :
                new ObjectParameter("discount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertIntoPrescriptionMainFromTemp", formulaTotalCostParameter, methodOfAdministParameter, methodOfAdministCOSTParameter, dispensingFeeParameter, postageParameter, postageFeeParameter, prescriptionStatusParameter, discountReasonParameter, discountParameter);
        }
    
        public virtual int spInsertNewPatient(string patientName, string patientSurname, string patientAddress, string patientTown, string patientCounty, string patientEirecode, string patientPhoneNum, string patientEmail, string patientMedication, string patientCountry, string patientMedicalCondition)
        {
            var patientNameParameter = patientName != null ?
                new ObjectParameter("patientName", patientName) :
                new ObjectParameter("patientName", typeof(string));
    
            var patientSurnameParameter = patientSurname != null ?
                new ObjectParameter("patientSurname", patientSurname) :
                new ObjectParameter("patientSurname", typeof(string));
    
            var patientAddressParameter = patientAddress != null ?
                new ObjectParameter("patientAddress", patientAddress) :
                new ObjectParameter("patientAddress", typeof(string));
    
            var patientTownParameter = patientTown != null ?
                new ObjectParameter("patientTown", patientTown) :
                new ObjectParameter("patientTown", typeof(string));
    
            var patientCountyParameter = patientCounty != null ?
                new ObjectParameter("patientCounty", patientCounty) :
                new ObjectParameter("patientCounty", typeof(string));
    
            var patientEirecodeParameter = patientEirecode != null ?
                new ObjectParameter("patientEirecode", patientEirecode) :
                new ObjectParameter("patientEirecode", typeof(string));
    
            var patientPhoneNumParameter = patientPhoneNum != null ?
                new ObjectParameter("patientPhoneNum", patientPhoneNum) :
                new ObjectParameter("patientPhoneNum", typeof(string));
    
            var patientEmailParameter = patientEmail != null ?
                new ObjectParameter("patientEmail", patientEmail) :
                new ObjectParameter("patientEmail", typeof(string));
    
            var patientMedicationParameter = patientMedication != null ?
                new ObjectParameter("patientMedication", patientMedication) :
                new ObjectParameter("patientMedication", typeof(string));
    
            var patientCountryParameter = patientCountry != null ?
                new ObjectParameter("patientCountry", patientCountry) :
                new ObjectParameter("patientCountry", typeof(string));
    
            var patientMedicalConditionParameter = patientMedicalCondition != null ?
                new ObjectParameter("patientMedicalCondition", patientMedicalCondition) :
                new ObjectParameter("patientMedicalCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertNewPatient", patientNameParameter, patientSurnameParameter, patientAddressParameter, patientTownParameter, patientCountyParameter, patientEirecodeParameter, patientPhoneNumParameter, patientEmailParameter, patientMedicationParameter, patientCountryParameter, patientMedicalConditionParameter);
        }
    
        public virtual int spInsertPatentFormulaToTemp(string patentFormulaName, string pFrefNum, string herbRefNum, string herbBatchNum, Nullable<decimal> herbProcentage, Nullable<int> bottleQuantity, Nullable<decimal> dosageGrams)
        {
            var patentFormulaNameParameter = patentFormulaName != null ?
                new ObjectParameter("patentFormulaName", patentFormulaName) :
                new ObjectParameter("patentFormulaName", typeof(string));
    
            var pFrefNumParameter = pFrefNum != null ?
                new ObjectParameter("PFrefNum", pFrefNum) :
                new ObjectParameter("PFrefNum", typeof(string));
    
            var herbRefNumParameter = herbRefNum != null ?
                new ObjectParameter("herbRefNum", herbRefNum) :
                new ObjectParameter("herbRefNum", typeof(string));
    
            var herbBatchNumParameter = herbBatchNum != null ?
                new ObjectParameter("herbBatchNum", herbBatchNum) :
                new ObjectParameter("herbBatchNum", typeof(string));
    
            var herbProcentageParameter = herbProcentage.HasValue ?
                new ObjectParameter("herbProcentage", herbProcentage) :
                new ObjectParameter("herbProcentage", typeof(decimal));
    
            var bottleQuantityParameter = bottleQuantity.HasValue ?
                new ObjectParameter("bottleQuantity", bottleQuantity) :
                new ObjectParameter("bottleQuantity", typeof(int));
    
            var dosageGramsParameter = dosageGrams.HasValue ?
                new ObjectParameter("dosageGrams", dosageGrams) :
                new ObjectParameter("dosageGrams", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertPatentFormulaToTemp", patentFormulaNameParameter, pFrefNumParameter, herbRefNumParameter, herbBatchNumParameter, herbProcentageParameter, bottleQuantityParameter, dosageGramsParameter);
        }
    
        public virtual int spInsertRecordTempPrescription(string formulaRefNum, string herbRefNum, string formulaName, Nullable<decimal> herbQuantity, Nullable<int> numOfDosageDays, Nullable<int> patientID, Nullable<int> practitionerID, string herbBatchNum)
        {
            var formulaRefNumParameter = formulaRefNum != null ?
                new ObjectParameter("formulaRefNum", formulaRefNum) :
                new ObjectParameter("formulaRefNum", typeof(string));
    
            var herbRefNumParameter = herbRefNum != null ?
                new ObjectParameter("herbRefNum", herbRefNum) :
                new ObjectParameter("herbRefNum", typeof(string));
    
            var formulaNameParameter = formulaName != null ?
                new ObjectParameter("formulaName", formulaName) :
                new ObjectParameter("formulaName", typeof(string));
    
            var herbQuantityParameter = herbQuantity.HasValue ?
                new ObjectParameter("herbQuantity", herbQuantity) :
                new ObjectParameter("herbQuantity", typeof(decimal));
    
            var numOfDosageDaysParameter = numOfDosageDays.HasValue ?
                new ObjectParameter("numOfDosageDays", numOfDosageDays) :
                new ObjectParameter("numOfDosageDays", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(int));
    
            var practitionerIDParameter = practitionerID.HasValue ?
                new ObjectParameter("practitionerID", practitionerID) :
                new ObjectParameter("practitionerID", typeof(int));
    
            var herbBatchNumParameter = herbBatchNum != null ?
                new ObjectParameter("herbBatchNum", herbBatchNum) :
                new ObjectParameter("herbBatchNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertRecordTempPrescription", formulaRefNumParameter, herbRefNumParameter, formulaNameParameter, herbQuantityParameter, numOfDosageDaysParameter, patientIDParameter, practitionerIDParameter, herbBatchNumParameter);
        }
    
        public virtual int spInsertTraditionalFormula(string formulaName, string formulaRefNum, Nullable<int> dosageDays, Nullable<int> patientID, Nullable<int> practitionerID)
        {
            var formulaNameParameter = formulaName != null ?
                new ObjectParameter("formulaName", formulaName) :
                new ObjectParameter("formulaName", typeof(string));
    
            var formulaRefNumParameter = formulaRefNum != null ?
                new ObjectParameter("formulaRefNum", formulaRefNum) :
                new ObjectParameter("formulaRefNum", typeof(string));
    
            var dosageDaysParameter = dosageDays.HasValue ?
                new ObjectParameter("dosageDays", dosageDays) :
                new ObjectParameter("dosageDays", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(int));
    
            var practitionerIDParameter = practitionerID.HasValue ?
                new ObjectParameter("practitionerID", practitionerID) :
                new ObjectParameter("practitionerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertTraditionalFormula", formulaNameParameter, formulaRefNumParameter, dosageDaysParameter, patientIDParameter, practitionerIDParameter);
        }
    
        public virtual int spPFsale(Nullable<int> pracID, string batchNumID, Nullable<int> bottleQty, Nullable<System.DateTime> saleDate)
        {
            var pracIDParameter = pracID.HasValue ?
                new ObjectParameter("pracID", pracID) :
                new ObjectParameter("pracID", typeof(int));
    
            var batchNumIDParameter = batchNumID != null ?
                new ObjectParameter("batchNumID", batchNumID) :
                new ObjectParameter("batchNumID", typeof(string));
    
            var bottleQtyParameter = bottleQty.HasValue ?
                new ObjectParameter("bottleQty", bottleQty) :
                new ObjectParameter("bottleQty", typeof(int));
    
            var saleDateParameter = saleDate.HasValue ?
                new ObjectParameter("saleDate", saleDate) :
                new ObjectParameter("saleDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPFsale", pracIDParameter, batchNumIDParameter, bottleQtyParameter, saleDateParameter);
        }
    
        public virtual int spUpdateStock(string formulaRefNum, string herbBatchNum)
        {
            var formulaRefNumParameter = formulaRefNum != null ?
                new ObjectParameter("formulaRefNum", formulaRefNum) :
                new ObjectParameter("formulaRefNum", typeof(string));
    
            var herbBatchNumParameter = herbBatchNum != null ?
                new ObjectParameter("herbBatchNum", herbBatchNum) :
                new ObjectParameter("herbBatchNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateStock", formulaRefNumParameter, herbBatchNumParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> stp_CheckHerbStock(string herbRefNum)
        {
            var herbRefNumParameter = herbRefNum != null ?
                new ObjectParameter("herbRefNum", herbRefNum) :
                new ObjectParameter("herbRefNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("stp_CheckHerbStock", herbRefNumParameter);
        }
    }
}
